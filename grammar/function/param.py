
# 除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数， 使得函数定义出来的结构
# 不但能处理复杂的参数，还可以简化调用者的代码。


# -------------------------------位置参数-------------------------
# 先写一个计算 x 的平平方的参数
def power(x):
    return x * x

# 对于这个函数， 参数x 就是一个位置参数
def power1(x, n):
    s=1
    while n > 0:
        n = n - 1
        s = s * n
    return s

# 这两个都是位置参数


# ---------------------------------默认参数-----------------------------
# 可以给参数设定设定默认值
def power2(x, n = 2):
    s = 1
    while n > 0:
        n = n - 1
        s = s * n
    return s

# 当我们调用power(5) , 相当于调用 power(5, 2)

# 必选参数必须放在前面， 默认参数再后， 否则解释器会报错
# 如何设置默认参数
# 当函数有多个参数时， 把变化大的参数放前面，变化小的参数放后面。

# 默认参数降低了函数调用的难度，而一旦需要更复杂的调用时， 又可以传递更多的参数来实现。
# 无论是简单调用还是复杂调用，函数只需要定义一个

# 有多个默认参数时， 调用的时候， 既可以按顺序提供默认参数，如果参数没有提供，仍然使用默认值
# 也可以不按顺序提供部分默认参数。 当不按顺序提供部分默认参数时， 需要把参数名写上

# 定义默认参数要牢记一点： 默认参数必须指向不变对象！

# 为什么要设计str\ None 这样的不变对象呢？ 因为不变对象一旦创建， 对象内部的数据就不能修改，
# 这样就减少了由于修改数据导致的错误。此外， 由于对象不变，多任务环境下同时读取对象不需要加锁，
# 同时读一点问题都没有。 我们再编写程序时， 如果可以设计一个不变对象， 那就尽量设计成不变对象。


# ---------------------------------------可变参数--------------------------

# 可变参数就是传入的参数个数是可变的。
# 调用的时候，需要先组装出一个list 或 tuple
# 定义可变输惨和定义一个list 或 tuple 参数相比， 仅仅在前面加了一个* 号。 在函数内部，参数
# 接受到的是一个tuple, 因此， 函数代码完全不变。 但是， 调用该函数时， 可以传入任意个参数。

# *nums 表示把 nums 这个list 的所有元素作为可变参数传进去。


# -------------------------------------关键字参数----------------------------

# 关键字参数允许传入 0 个或任意个含参数名的参数， 这些关键字参数在函数内部自动组装为一个dict
# 关键字参数有什么用？ 可以扩展函数的功能。

# 和可变参数类似， 也可以先组装出一个dict, 然后该 dict 转换为关键字参数传进去：

# 对于关键字参数， 函数的调用者可以传入任意不受限制的关键字参数。 至于到底传入了哪些， 就需要在
# 函数内部通过kw 检查。

# 和关键字参数 **kw 不同，命名关键字参数需要一个特殊分隔符 * ， * 后面的参数被视为命名关键字参数
def person(name, age, * ,city ,job):
    print()

# 如果函数定义中已经有了一个可变参数， 后面跟着的命名关键字参数就不再需要一个特殊分隔符 * 了
def person1(name, age, *args, city, job):
    print()

# 命名关键字参数必须传入参数名，这和位置参数不同
# 命名关键字参数city 具有默认值， 调用时， 可不传入city 参数


# 参数组合
# 在 Python 中定义函数， 可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数
# 这 5 种参数都可以组合使用。
# 但是， 参数定义的顺序必须是： 必选参数、默认参数、可变参数、命名关键字参数和关键字参数
























